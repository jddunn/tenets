name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags

permissions:
  contents: write  # For creating releases
  id-token: write  # For trusted PyPI publishing
  pages: write     # For GitHub Pages deployment

jobs:
  # Validate release
  validate:
    name: Validate release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog
          
      - name: Validate tag format
        run: |
          if ! [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid tag format. Expected: v1.2.3 or v1.2.3-beta1"
            exit 1
          fi
          
      - name: Check CHANGELOG.md updated
        run: |
          if ! grep -q "${{ github.ref_name }}" CHANGELOG.md; then
            echo "Warning: CHANGELOG.md not updated for ${{ github.ref_name }}"
            # Don't fail, just warn
          fi

  # Build release artifacts
  build:
    name: Build release
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build distribution
        run: python -m build
        
      - name: Check distribution
        run: |
          twine check --strict dist/*
          ls -la dist/
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Build standalone executables
  build-binaries:
    name: Build ${{ matrix.os }} binary
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
          - os: windows-latest
            name: windows
          - os: macos-latest
            name: macos
            
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[all]"
          pip install pyinstaller
          
      - name: Build with PyInstaller
        shell: bash
        run: |
          pyinstaller --onefile \
            --name tenets-${{ matrix.name }} \
            --add-data "tenets:tenets" \
            --hidden-import tenets \
            tenets/__main__.py
            
      - name: Test binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./dist/tenets-${{ matrix.name }}.exe --version
            ./dist/tenets-${{ matrix.name }}.exe --help
          else
            ./dist/tenets-${{ matrix.name }} --version
            ./dist/tenets-${{ matrix.name }} --help
          fi
          
      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: tenets-${{ matrix.name }}
          path: dist/tenets-${{ matrix.name }}*

  # Create GitHub release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, build-binaries]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
          
      - name: Generate release notes
        id: release_notes
        run: |
          # Extract version changelog
          VERSION="${{ github.ref_name }}"
          
          # Create release notes
          cat > notes.md << EOF
          ## 🚀 Installation
          
          ### PyPI
          \`\`\`bash
          pip install tenets==${VERSION#v}
          \`\`\`
          
          ### Standalone Binaries
          Download the appropriate binary for your platform from the assets below.
          
          ## 📖 Documentation
          
          Full documentation available at [docs.tenets.dev](https://docs.tenets.dev)
          
          ## 🏢 About
          
          Tenets is developed by [manic.agency](https://manic.agency)
          
          ### Stay Updated
          Subscribe to our [AI newsletter](https://manic.agency/blog) for the latest updates and insights.
          
          EOF
          
          # Add changelog if it exists
          if grep -q "${VERSION}" CHANGELOG.md; then
            echo "## 📝 Changelog" >> notes.md
            awk "/## \[${VERSION}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md >> notes.md
          fi
          
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          body_path: notes.md
          files: |
            artifacts/dist/*
            artifacts/tenets-*/*
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, github-release]
    environment:
      name: pypi
      url: https://pypi.org/project/tenets/
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          print-hash: true

  # Build and push Docker image
  docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: [build, github-release]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        if: env.DOCKER_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            jddunn/tenets
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ env.DOCKER_USERNAME != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

  # Update documentation with versioned docs
  docs-release:
    name: Deploy versioned documentation
    runs-on: ubuntu-latest
    needs: publish-pypi
    permissions:
      contents: write
      pages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Configure git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install mkdocs mkdocs-material mkdocs-material-extensions
          pip install pymdown-extensions mkdocs-minify-plugin
          pip install mike
          pip install -e .
          
      - name: Deploy versioned docs
        run: |
          VERSION="${{ github.ref_name }}"
          # Deploy the tagged version
          mike deploy --push --update-aliases ${VERSION#v} latest
          mike set-default --push latest
          