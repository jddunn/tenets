name: Auto Version Bump

on:
  pull_request:
    types: [closed]
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  bump:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gather PR metadata
        id: pr
        run: |
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "base=${{ github.event.pull_request.base.sha }}" >> $GITHUB_OUTPUT
          echo "head=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT

      - name: Collect commit messages
        id: commits
        run: |
          git fetch --no-tags --prune --unshallow || true
          base=${{ steps.pr.outputs.base }}
          head=${{ steps.pr.outputs.head }}
          git log --pretty=%s ${base}..${head} > commit_messages.txt || echo "(no commits)" > commit_messages.txt
          echo "Collected commit messages:" >&2
          cat commit_messages.txt

      - name: Decide bump level from commits
        id: decide
        run: |
          level=patch
          if grep -Eiq 'BREAKING CHANGE' commit_messages.txt; then level=major; fi
          if [ "$level" = patch ] && (grep -Eiq '^feat(\(|:)' commit_messages.txt || grep -Eiq '^perf(\(|:)' commit_messages.txt); then level=minor; fi
          # perf or refactor or fix => patch (default) unless feat or breaking
          echo "level=$level" >> $GITHUB_OUTPUT

      - name: Detect docs/chore-only change
        id: scope
        run: |
          # Collect changed files in PR (requires earlier gh call if needed) fallback to diff
          files=$(git diff --name-only ${{ steps.pr.outputs.base }}..${{ steps.pr.outputs.head }})
          echo "$files" > changed.txt
          # If every file matches docs or md or workflow or README/CHANGELOG only, mark skip
          if awk 'NF' changed.txt | grep -Ev '^docs/|^README.md$|^CHANGELOG.md$|^LICENSE$|^\.github/' | grep . >/dev/null; then
            echo "pure_docs=false" >> $GITHUB_OUTPUT
          else
            echo "pure_docs=true" >> $GITHUB_OUTPUT
          fi
          echo "level=$level" >> $GITHUB_OUTPUT

      - name: Determine previous tag
        id: prev
        run: |
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo '')
          echo "last_tag=$last_tag" >> $GITHUB_OUTPUT
          if [ -n "$last_tag" ]; then
            last_commit_tag=$(git rev-list -n 1 "$last_tag")
            head_commit=$(git rev-parse HEAD)
            if [ "$last_commit_tag" = "$head_commit" ]; then
              echo "already_tagged=true" >> $GITHUB_OUTPUT
            else
              echo "already_tagged=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "already_tagged=false" >> $GITHUB_OUTPUT
          fi

      - name: Read current version
        id: cur
        run: |
          pyver=$(grep -E '^version\s*=\s*"' pyproject.toml | head -1 | sed -E 's/version\s*=\s*"([0-9]+\.[0-9]+\.[0-9]+).*"/\1/')
          initver=$(grep -E '__version__\s*=\s*"' tenets/__init__.py | sed -E 's/.*"([0-9]+\.[0-9]+\.[0-9]+).*"/\1/')
          if [ "$pyver" != "$initver" ]; then echo "Version mismatch" && exit 1; fi
          echo "current=$pyver" >> $GITHUB_OUTPUT

      - name: Skip decision
        id: skip
        run: |
          if [ '${{ steps.prev.outputs.already_tagged }}' = 'true' ]; then echo "skip=already-tagged" >> $GITHUB_OUTPUT; exit 0; fi
          if [ '${{ steps.scope.outputs.pure_docs }}' = 'true' ]; then echo "skip=pure-docs" >> $GITHUB_OUTPUT; exit 0; fi
          # If no conventional commit of interest present, skip
          if ! grep -Eiq '^(feat|fix|perf|refactor|chore|BREAKING CHANGE)' commit_messages.txt; then echo "skip=no-semantic" >> $GITHUB_OUTPUT; exit 0; fi
          echo "skip=none" >> $GITHUB_OUTPUT

      - name: Compute next version
        id: next
        if: steps.skip.outputs.skip == 'none'
        run: |
          cur=${{ steps.cur.outputs.current }}
          IFS='.' read -r MA MI PA <<< "$cur"
          case ${{ steps.decide.outputs.level }} in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            patch) PA=$((PA+1)) ;;
          esac
          next="${MA}.${MI}.${PA}"
          echo "next=$next" >> $GITHUB_OUTPUT

      - name: Update versions
        if: steps.skip.outputs.skip == 'none'
        run: |
          next=${{ steps.next.outputs.next }}
          sed -i "s/^version = \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/version = \"$next\"/" pyproject.toml
          sed -i "s/__version__ = \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/__version__ = \"$next\"/" tenets/__init__.py
          echo "## [v$next] - $(date +%Y-%m-%d)"$'\n' >> CHANGELOG.md
          echo "<!-- Bump type: ${{ steps.decide.outputs.level }} (PR #${{ steps.pr.outputs.number }}) -->" >> CHANGELOG.md
          # Extract categorized commit messages
          feats=$(grep -E '^feat(\(|:)' commit_messages.txt || true)
          perfs=$(grep -E '^perf(\(|:)' commit_messages.txt || true)
          fixes=$(grep -E '^fix(\(|:)' commit_messages.txt || true)
          refs=$(grep -E '^refactor(\(|:)' commit_messages.txt || true)
          # Helper function to print a section
          format_section() {
            header="$1"; content="$2"; category="$3"; # category is feat/perf/fix/refactor
            if [ -n "$content" ]; then
              echo "### $header" >> CHANGELOG.md
              echo "$content" | sed -E 's/^(feat|perf|fix|refactor)(\([^)]+\))?: *//' | while IFS= read -r line; do
                [ -z "$line" ] && continue; echo "- $line" >> CHANGELOG.md; done
              echo >> CHANGELOG.md
            fi
          }
          format_section "Added" "$feats" feat
          format_section "Performance" "$perfs" perf
          format_section "Fixed" "$fixes" fix
          format_section "Refactored" "$refs" refactor
          if ! grep -Eq "^### (Added|Performance|Fixed|Refactored)" <(tail -n +1 CHANGELOG.md | sed -n "/^## \[v$next\]/,/^## \[/p"); then
            echo "- Maintenance release." >> CHANGELOG.md
          fi
          echo >> CHANGELOG.md

      - name: Commit & tag
        if: steps.skip.outputs.skip == 'none'
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          next=${{ steps.next.outputs.next }}
          git add pyproject.toml tenets/__init__.py CHANGELOG.md
          git commit -m "chore(release): v$next" || echo "No changes to commit"
          git tag -a v$next -m "v$next"
          git push origin master --tags

      - name: Publish release (Release Drafter)
        if: steps.skip.outputs.skip == 'none'
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
          publish: true
          tag: v${{ steps.next.outputs.next }}
          name: v${{ steps.next.outputs.next }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger release workflow (if present)
        if: steps.skip.outputs.skip == 'none'
        run: |
          echo "Tag pushed: v${{ steps.next.outputs.next }}"

      - name: Skipped reason
        if: steps.skip.outputs.skip != 'none'
        run: |
          echo "Version bump skipped: ${{ steps.skip.outputs.skip }}"
