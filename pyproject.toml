# Tenets Project Configuration
# PEP 517/518/621 compliant pyproject.toml

[project]
name = "tenets"
version = "0.1.0"
description = "AI-native code exploration and context management platform"
authors = [{name = "Tenets Team", email = "team@tenets.dev"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["ai", "llm", "code-analysis", "developer-tools", "prompt-engineering]

# PyPI classifiers
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]

# Core dependencies - minimal set for basic functionality
dependencies = [
    "typer>=0.9.0",           # CLI framework
    "rich>=13.0.0",           # Terminal formatting
    "pydantic>=2.0.0",        # Data validation
    "pydantic-settings>=2.0.0",  # Settings management
    "httpx>=0.25.0",          # HTTP client
    "gitpython>=3.1.0",       # Git operations
    "pathspec>=0.11.0",       # .gitignore parsing
    "chardet>=5.0.0",         # Encoding detection
    "aiofiles>=23.0.0",       # Async file operations
    "tqdm>=4.65.0",           # Progress bars
    "psutil>=5.9.0",          # System monitoring
    "PyYAML>=6.0"             # YAML parsing
]

[project.urls]
Homepage = "https://github.com/jddunn/tenets"
Documentation = "https://docs.tenets.dev"
Repository = "https://github.com/jddunn/tenets"
Issues = "https://github.com/jddunn/tenets/issues"
Changelog = "https://github.com/jddunn/tenets/blob/main/CHANGELOG.md"

[project.scripts]
# CLI entry point
tenets = "tenets.cli.app:app"

[project.optional-dependencies]
# Light NLP features (statistical analysis)
light = [
    "yake>=0.4.8",            # Keyword extraction
    "scikit-learn>=1.3.0",    # ML utilities
    "textstat>=0.7.3",        # Text statistics
]

# Deep learning features
ml = [
    "torch>=2.0.0",                    # PyTorch
    "transformers>=4.30.0",            # Hugging Face transformers
    "sentence-transformers>=2.2.0",    # Sentence embeddings
    "tiktoken>=0.5.0",                 # OpenAI tokenizer
    "faiss-cpu>=1.7.4",                # Vector search
    "openai>=1.0.0",                   # OpenAI API
    "anthropic>=0.25.0",               # Anthropic API
    "litellm>=1.0.0",                  # Multi-LLM support
]

# Visualization features
viz = [
    "matplotlib>=3.7.0",      # Plotting
    "networkx>=3.0",          # Graph visualization
    "pydot>=1.4.0",          # Graphviz interface
    "plotly>=5.0.0",         # Interactive plots
]

# Web interface
web = [
    "fastapi>=0.100.0",               # Web framework
    "uvicorn[standard]>=0.23.0",      # ASGI server
    "websockets>=11.0",               # WebSocket support
    "jinja2>=3.1.0",                  # Templating
    "python-multipart>=0.0.6",        # Form data
    "sse-starlette>=1.6.0",          # Server-sent events
]

# Database and caching
db = [
    "alembic>=1.12.0",        # Database migrations
    "sqlalchemy>=2.0.0",      # ORM
    "redis>=5.0.0",           # Caching
]

# Development dependencies - everything needed for development
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.82.0",
    "faker>=19.0.0",
    "freezegun>=1.2.0",
    "coverage>=7.3.0",
    
    # Formatting and Linting
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    
    # Pre-commit
    "pre-commit>=3.4.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
    "mkdocs-git-authors-plugin>=0.7.0",
    "mkdocs-awesome-pages-plugin>=2.9.0",
    "mkdocs-section-index>=0.3.0",
    "mkdocs-macros-plugin>=0.9.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "mkdocs-jupyter>=0.24.0",
    "mike>=2.0.0",
    
    # Build and release
    "build>=1.0.0",
    "twine>=4.0.0",
    "wheel>=0.41.0",
    "commitizen>=3.12.0",
    "pyinstaller>=6.0.0",
]

# Test-specific dependencies (lighter than dev)
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.92.0",
    "responses>=0.24.0",      # Mock HTTP responses
    "faker>=20.0.0",          # Generate test data
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.23.0",
    "mkdocs-minify-plugin>=0.7.0",
    "pymdown-extensions>=10.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
    "mike>=2.0.0",
]

# All features combined
all = [
    "tenets[light,ml,viz,web,db]",
]

# ============================================================================
# Build System Configuration
# ============================================================================

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
# Include patterns for build
include = [
    "tenets/**/*.py",
    "tenets/**/*.json",
    "tenets/**/*.yaml",
    "tenets/**/*.yml",
    "tenets/**/*.toml",
    "tenets/**/*.html",
    "tenets/**/*.css",
    "tenets/**/*.js",
]
# Exclude patterns for build
exclude = [
    "tests",
    "docs",
    "*.pyc",
    "__pycache__",
]

# ============================================================================
# Tool Configurations
# ============================================================================

# Black - Code Formatter
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

# isort - Import Sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/venv/*"]

# Ruff - Fast Python Linter
[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "RUF",  # Ruff-specific rules
    "PTH",  # flake8-use-pathlib
    "ERA",  # flake8-eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
]
ignore = [
    "E501",    # line too long (handled by black)
    "B008",    # do not perform function calls in argument defaults
    "B905",    # zip without explicit strict=
    "PLR0913", # Too many arguments
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/*" = ["ARG", "S101", "PLR2004"]

# MyPy - Type Checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "yake.*",
    "sentence_transformers.*",
    "tiktoken.*",
    "transformers.*",
    "faiss.*",
]
ignore_missing_imports = true

# Pytest - Testing Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--cov=tenets",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--durations=10",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_git: marks tests that require git",
    "requires_ml: marks tests that require ML dependencies",
    "cli: CLI command tests",
    "smoke: Quick smoke tests for CI",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage - Test Coverage Configuration
[tool.coverage.run]
source = ["tenets"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__main__.py",
    "*/cli/app.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]

# Commitizen - Version Bumping and Changelog
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "tenets/__init__.py:__version__",
    "pyproject.toml:version",
]
update_changelog_on_bump = true
major_version_zero = true
changelog_file = "CHANGELOG.md"
changelog_incremental = true
changelog_start_rev = "v0.1.0"

# FIXED: Using table format to allow spaces in keys
[tool.commitizen.customize]
bump_pattern = "^(feat|fix|perf|refactor|BREAKING)"

# Using table syntax instead of inline to support spaces
[tool.commitizen.customize.bump_map]
"BREAKING CHANGE" = "MAJOR"
"BREAKING" = "MAJOR"
"feat" = "MINOR"
"fix" = "PATCH"
"perf" = "PATCH"
"refactor" = "PATCH"

# Bandit - Security Linting
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_task tests

# Pydocstyle - Docstring Checking
[tool.pydocstyle]
convention = "google"
match-dir = "^(?!tests|venv|build|dist).*"
add-ignore = ["D100", "D104"]  # Missing docstring in public module/package