"""Context formatting for different output formats.

The formatter takes aggregated context and formats it for consumption by
LLMs or humans in various formats (markdown, XML, JSON).
"""

import json
from typing import Dict, Any, List, Optional
from datetime import datetime
from pathlib import Path

from tenets.config import TenetsConfig
from tenets.models.context import PromptContext
from tenets.utils.logger import get_logger


class ContextFormatter:
    """Formats aggregated context for output."""
    
    def __init__(self, config: TenetsConfig):
        """Initialize the formatter.
        
        Args:
            config: Tenets configuration
        """
        self.config = config
        self.logger = get_logger(__name__)
        
    def format(
        self,
        aggregated: Dict[str, Any],
        format: str,
        prompt_context: PromptContext,
        session_name: Optional[str] = None
    ) -> str:
        """Format aggregated context for output.
        
        Args:
            aggregated: Aggregated context data
            format: Output format (markdown, xml, json)
            prompt_context: Original prompt context
            session_name: Optional session name
            
        Returns:
            Formatted context string
        """
        self.logger.debug(f"Formatting context as {format}")
        
        if format == "markdown":
            return self._format_markdown(aggregated, prompt_context, session_name)
        elif format == "xml":
            return self._format_xml(aggregated, prompt_context, session_name)
        elif format == "json":
            return self._format_json(aggregated, prompt_context, session_name)
        else:
            raise ValueError(f"Unknown format: {format}")
    
    def _format_markdown(
        self,
        aggregated: Dict[str, Any],
        prompt_context: PromptContext,
        session_name: Optional[str]
    ) -> str:
        """Format as markdown."""
        lines = []
        
        # Header
        lines.append(f"# Context for: {prompt_context.text}")
        lines.append("")
        lines.append(f"*Generated by tenets v{self.config.version} at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")
        
        if session_name:
            lines.append(f"*Session: {session_name}*")
        
        lines.append("")
        
        # Task analysis
        lines.append("## Task Analysis")
        lines.append(f"- **Type**: {prompt_context.task_type}")
        lines.append(f"- **Keywords**: {', '.join(prompt_context.keywords[:10])}")
        
        if prompt_context.focus_areas:
            lines.append(f"- **Focus Areas**: {', '.join(prompt_context.focus_areas)}")
            
        lines.append("")
        
        # Statistics
        stats = aggregated['statistics']
        lines.append("## Context Summary")
        lines.append(f"- **Files Found**: {stats['files_analyzed']}")
        lines.append(f"- **Files Included**: {stats['files_included']} full, {stats['files_summarized']} summarized")
        lines.append(f"- **Token Usage**: {aggregated['total_tokens']:,} / {aggregated['available_tokens']:,} ({stats['token_utilization']:.1%})")
        lines.append("")
        
        # Git context if available
        if aggregated.get('git_context'):
            lines.extend(self._format_git_context_markdown(aggregated['git_context']))
            lines.append("")
        
        # Files
        lines.append("## Relevant Files")
        lines.append("")
        
        # Group by status
        full_files = [f for f in aggregated['included_files'] if not f['summarized']]
        summarized_files = [f for f in aggregated['included_files'] if f['summarized']]
        
        if full_files:
            lines.append("### Complete Files")
            lines.append("")
            
            for file_info in full_files:
                file = file_info['file']
                lines.append(f"#### {file.path} ({file.lines} lines)")
                
                # Add file metadata
                lines.append(f"*Language: {file.language} | Relevance: {file.relevance_score:.2f}*")
                lines.append("")
                
                # Add content with syntax highlighting
                lines.append(f"```{file.language}")
                lines.append(file_info['content'])
                lines.append("```")
                lines.append("")
        
        if summarized_files:
            lines.append("### Summarized Files")
            lines.append("")
            
            for file_info in summarized_files:
                file = file_info['file']
                summary = file_info.get('summary')
                
                lines.append(f"#### {file.path} (Summary: {file.lines} â†’ {summary.summary_tokens if summary else '?'} tokens)")
                lines.append(f"*Language: {file.language} | Relevance: {file.relevance_score:.2f}*")
                lines.append("")
                
                lines.append(f"```{file.language}")
                lines.append(file_info['content'])
                lines.append("```")
                
                if summary and summary.instructions:
                    lines.append("")
                    lines.append("*" + " ".join(summary.instructions) + "*")
                    
                lines.append("")
        
        # Instructions for AI
        lines.append("## Instructions for AI Assistant")
        lines.append("")
        lines.append("Based on this context:")
        lines.append("")
        lines.append("1. **Request specific files** if you need full implementation details:")
        lines.append("   - Format: `Show me: path/to/file.py`")
        lines.append("")
        lines.append("2. **Ask for related files** if something seems missing:")
        lines.append("   - Format: `Find files related to: <topic>`")
        lines.append("")
        lines.append("3. **Get more context** about specific areas:")
        lines.append("   - Format: `Explain: <concept> in this codebase`")
        lines.append("")
        
        return "\n".join(lines)
    
    def _format_xml(
        self,
        aggregated: Dict[str, Any],
        prompt_context: PromptContext,
        session_name: Optional[str]
    ) -> str:
        """Format as XML (optimized for Claude)."""
        lines = []
        
        lines.append('<?xml version="1.0" encoding="UTF-8"?>')
        lines.append('<context>')
        
        # Metadata
        lines.append('  <metadata>')
        lines.append(f'    <generator>tenets v{self.config.version}</generator>')
        lines.append(f'    <timestamp>{datetime.now().isoformat()}</timestamp>')
        lines.append(f'    <prompt>{self._escape_xml(prompt_context.text)}</prompt>')
        
        if session_name:
            lines.append(f'    <session>{session_name}</session>')
            
        lines.append('  </metadata>')
        
        # Analysis
        lines.append('  <analysis>')
        lines.append(f'    <task_type>{prompt_context.task_type}</task_type>')
        lines.append(f'    <keywords>{", ".join(prompt_context.keywords)}</keywords>')
        
        if prompt_context.focus_areas:
            lines.append(f'    <focus_areas>{", ".join(prompt_context.focus_areas)}</focus_areas>')
            
        lines.append('  </analysis>')
        
        # Statistics
        stats = aggregated['statistics']
        lines.append('  <statistics>')
        lines.append(f'    <files_analyzed>{stats["files_analyzed"]}</files_analyzed>')
        lines.append(f'    <files_included>{stats["files_included"]}</files_included>')
        lines.append(f'    <files_summarized>{stats["files_summarized"]}</files_summarized>')
        lines.append(f'    <total_tokens>{aggregated["total_tokens"]}</total_tokens>')
        lines.append('  </statistics>')
        
        # Files
        lines.append('  <files>')
        
        for file_info in aggregated['included_files']:
            file = file_info['file']
            
            lines.append(f'    <file path="{file.path}" summarized="{str(file_info["summarized"]).lower()}">')
            lines.append(f'      <language>{file.language}</language>')
            lines.append(f'      <relevance>{file.relevance_score:.2f}</relevance>')
            lines.append(f'      <lines>{file.lines}</lines>')
            lines.append(f'      <content><![CDATA[')
            lines.append(file_info['content'])
            lines.append('      ]]></content>')
            
            if file_info['summarized'] and file_info.get('summary'):
                summary = file_info['summary']
                if summary.instructions:
                    lines.append(f'      <instructions>{self._escape_xml(" ".join(summary.instructions))}</instructions>')
                    
            lines.append('    </file>')
            
        lines.append('  </files>')
        
        # Git context
        if aggregated.get('git_context'):
            lines.extend(self._format_git_context_xml(aggregated['git_context']))
            
        lines.append('</context>')
        
        return "\n".join(lines)
    
    def _format_json(
        self,
        aggregated: Dict[str, Any],
        prompt_context: PromptContext,
        session_name: Optional[str]
    ) -> str:
        """Format as JSON."""
        data = {
            'context': {
                'prompt': prompt_context.text,
                'generated_at': datetime.now().isoformat(),
                'generator': f'tenets v{self.config.version}',
                'session': session_name
            },
            'analysis': {
                'task_type': prompt_context.task_type,
                'keywords': prompt_context.keywords,
                'focus_areas': prompt_context.focus_areas
            },
            'statistics': aggregated['statistics'],
            'files': []
        }
        
        # Add files
        for file_info in aggregated['included_files']:
            file = file_info['file']
            
            file_data = {
                'path': file.path,
                'language': file.language,
                'relevance_score': file.relevance_score,
                'lines': file.lines,
                'summarized': file_info['summarized'],
                'content': file_info['content']
            }
            
            if file_info['summarized'] and file_info.get('summary'):
                summary = file_info['summary']
                file_data['summary_info'] = {
                    'original_tokens': summary.original_tokens,
                    'summary_tokens': summary.summary_tokens,
                    'compression_ratio': summary.compression_ratio,
                    'instructions': summary.instructions
                }
                
            data['files'].append(file_data)
        
        # Add git context
        if aggregated.get('git_context'):
            data['git_context'] = aggregated['git_context']
            
        return json.dumps(data, indent=2)
    
    def _format_git_context_markdown(self, git_context: Dict[str, Any]) -> List[str]:
        """Format git context for markdown."""
        lines = ["## Git Context"]
        
        if 'branch' in git_context:
            lines.append(f"- **Current Branch**: {git_context['branch']}")
            
        if 'recent_commits' in git_context:
            lines.append("")
            lines.append("### Recent Commits")
            for commit in git_context['recent_commits'][:5]:
                lines.append(f"- `{commit['sha'][:8]}` {commit['message']} - {commit['author']} ({commit['date']})")
                
        if 'contributors' in git_context:
            lines.append("")
            lines.append("### Top Contributors")
            for contributor in git_context['contributors'][:5]:
                lines.append(f"- {contributor['name']}: {contributor['commits']} commits")
                
        return lines
    
    def _format_git_context_xml(self, git_context: Dict[str, Any]) -> List[str]:
        """Format git context for XML."""
        lines = ['  <git_context>']
        
        if 'branch' in git_context:
            lines.append(f'    <branch>{git_context["branch"]}</branch>')
            
        if 'recent_commits' in git_context:
            lines.append('    <recent_commits>')
            for commit in git_context['recent_commits'][:5]:
                lines.append(f'      <commit sha="{commit["sha"]}" author="{self._escape_xml(commit["author"])}" date="{commit["date"]}">')
                lines.append(f'        <message>{self._escape_xml(commit["message"])}</message>')
                lines.append('      </commit>')
            lines.append('    </recent_commits>')
            
        lines.append('  </git_context>')
        return lines
    
    def _escape_xml(self, text: str) -> str:
        """Escape special characters for XML."""
        return (
            text.replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace('"', "&quot;")
            .replace("'", "&apos;")
        )